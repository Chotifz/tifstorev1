generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  phone         String?
  address       String?
  joinDate      DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  role          Role           @default(USER)
  isVerified    Boolean        @default(false)
  accounts      Account[]
  notifications Notification[]
  orders        Order[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Game {
  id          String     @id
  name        String
  slug        String     @unique
  icon        String
  banner      String?
  description String?
  developer   String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  products    Product[]
  promos      Promo[]
  categories  Category[] @relation("GameToCategory")
}

model Category {
  id          String   @id
  name        String
  slug        String   @unique
  description String?
  icon        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  games       Game[]   @relation("GameToCategory")
}

model Product {
  id            String      @id
  name          String
  slug          String
  price         Int
  originalPrice Int?
  discount      String?
  description   String?
  icon          String?
  tags          String[]
  gameId        String
  category      String
  duration      String?
  benefits      String[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  contents      String[]    @default([])
  orderItems    OrderItem[]
  game          Game        @relation(fields: [gameId], references: [id])

  @@unique([slug, gameId])
}

model Promo {
  id                   String   @id
  name                 String
  description          String
  startDate            DateTime
  endDate              DateTime
  discount             String
  banner               String?
  paymentMethod        String?
  applicableProducts   String[] @default([])
  applicableGames      String[] @default([])
  applicableCategories String[] @default([])
  isGlobal             Boolean  @default(false)
  gameId               String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  game                 Game?    @relation(fields: [gameId], references: [id])
}

model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  userId        String
  status        OrderStatus @default(PENDING)
  paymentMethod String?
  paymentId     String?
  totalAmount   Int
  email         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id])
  items         OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int      @default(1)
  price     Int
  gameData  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  data      Json?
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
  REFUNDED
}

enum NotificationType {
  ORDER
  PAYMENT
  PROMOTION
  SYSTEM
}
